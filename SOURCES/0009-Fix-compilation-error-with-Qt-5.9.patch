From f6194431aadefb06c8860b52eb6e605ed204c8a6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Johan=20Heikkil=C3=A4?= <johan.heikkila@gmail.com>
Date: Wed, 15 Nov 2017 00:59:02 +0200
Subject: [PATCH 1/1] Fix compilation error with Qt 5.9

---
 sleepyhead/updateparser.cpp | 42 +++++++++++++++++++++---------------------
 1 file changed, 21 insertions(+), 21 deletions(-)

diff --git a/sleepyhead/updateparser.cpp b/sleepyhead/updateparser.cpp
index 4b002948..b24df266 100644
--- a/sleepyhead/updateparser.cpp
+++ b/sleepyhead/updateparser.cpp
@@ -250,7 +250,7 @@ void UpdatesParser::readUpdates()
     Q_ASSERT(xml.isStartElement() && xml.name() == "Updates");
 
     while (xml.readNextStartElement()) {
-        if (xml.name().compare("PackageUpdate",Qt::CaseInsensitive)==0) {
+        if (xml.name().compare(QLatin1String("PackageUpdate"),Qt::CaseInsensitive)==0) {
             readPackageUpdate();
         } else {
             qDebug() << "Skipping Updates.xml tag" << xml.name();
@@ -262,52 +262,52 @@ void UpdatesParser::readUpdates()
 
 void UpdatesParser::readPackageUpdate()
 {
-    Q_ASSERT(xml.isStartElement() && (xml.name().compare("PackageUpdate",Qt::CaseInsensitive)==0));
+    Q_ASSERT(xml.isStartElement() && (xml.name().compare(QLatin1String("PackageUpdate"),Qt::CaseInsensitive)==0));
     package = PackageUpdate();
 
     while (xml.readNextStartElement()) {
-        if (xml.name().compare("Name",Qt::CaseInsensitive)==0) {
+        if (xml.name().compare(QLatin1String("Name"),Qt::CaseInsensitive)==0) {
             package.name = xml.readElementText().toLower();
-        } else if (xml.name().compare("DisplayName",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("DisplayName"),Qt::CaseInsensitive)==0) {
             package.displayName = xml.readElementText();
-        } else if (xml.name().compare("Description",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("Description"),Qt::CaseInsensitive)==0) {
             package.description = xml.readElementText();
-        } else if (xml.name().compare("Version",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("Version"),Qt::CaseInsensitive)==0) {
             package.versionString = xml.readElementText();
-        } else if (xml.name().compare("ReleaseDate",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("ReleaseDate"),Qt::CaseInsensitive)==0) {
             package.releaseDate = QDate().fromString(xml.readElementText(), "yyyy-MM-dd");
-        } else if (xml.name().compare("Default",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("Default"),Qt::CaseInsensitive)==0) {
             package.defaultInstall = xml.readElementText().compare("true") == 0;
-        } else if (xml.name().compare("ForcedInstallation",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("ForcedInstallation"),Qt::CaseInsensitive)==0) {
             package.forcedInstall = xml.readElementText().compare("true") == 0;
-        } else if (xml.name().compare("Script",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("Script"),Qt::CaseInsensitive)==0) {
             package.script = xml.readElementText();
-        } else if (xml.name().compare("Dependencies",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("Dependencies"),Qt::CaseInsensitive)==0) {
             package.dependencies = xml.readElementText().split(",");
-        } else if (xml.name().compare("UpdateFile",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("UpdateFile"),Qt::CaseInsensitive)==0) {
             for (int i=0; i<xml.attributes().size(); ++i) {
                 const QXmlStreamAttribute & at = xml.attributes().at(i);
-                if (at.name().compare("CompressedSize", Qt::CaseInsensitive)==0) {
+                if (at.name().compare(QLatin1String("CompressedSize"),Qt::CaseInsensitive)==0) {
                     package.compressedSize = at.value().toLong();
-                } else if (at.name().compare("UncompressedSize",Qt::CaseInsensitive)==0) {
+                } else if (at.name().compare(QLatin1String("UncompressedSize"),Qt::CaseInsensitive)==0) {
                     package.uncompressedSize = at.value().toLong();
-                } else if (at.name().compare("OS",Qt::CaseInsensitive)==0) {
+                } else if (at.name().compare(QLatin1String("OS"),Qt::CaseInsensitive)==0) {
                     package.os = at.value().toString();
                 }
             }
             xml.skipCurrentElement();
-        } else if (xml.name().compare("DownloadableArchives")==0) {
+        } else if (xml.name().compare(QLatin1String("DownloadableArchives"))==0) {
             package.downloadArchives = xml.readElementText().split(",");
-        } else if (xml.name().compare("Licenses",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("Licenses"),Qt::CaseInsensitive)==0) {
            while (xml.readNextStartElement()) {
-                if (xml.name().compare("License",Qt::CaseInsensitive)==0) {
+                if (xml.name().compare(QLatin1String("License"),Qt::CaseInsensitive)==0) {
                     QString name;
                     QString file;
                     for (int i=0; i<xml.attributes().size(); ++i) {
                         const QXmlStreamAttribute & at = xml.attributes().at(i);
-                        if (at.name().compare("name", Qt::CaseInsensitive)==0) {
+                        if (at.name().compare(QLatin1String("name"),Qt::CaseInsensitive)==0) {
                             name = at.value().toString();
-                        } else if (at.name().compare("file",Qt::CaseInsensitive)==0) {
+                        } else if (at.name().compare(QLatin1String("file"),Qt::CaseInsensitive)==0) {
                             file = at.value().toString();
                         }
                     }
@@ -319,7 +319,7 @@ void UpdatesParser::readPackageUpdate()
                      xml.skipCurrentElement();
                 }
             }
-        } else if (xml.name().compare("SHA1",Qt::CaseInsensitive)==0) {
+        } else if (xml.name().compare(QLatin1String("SHA1"),Qt::CaseInsensitive)==0) {
             package.sha1 = xml.readElementText();
         } else {
             qDebug() << "UP Skipping Updates.xml tag" << xml.name();
-- 
2.14.3

